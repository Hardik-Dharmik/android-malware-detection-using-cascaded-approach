import tkinter as tk
from tkinter import filedialog

import pickle
from tkinter import font as tkFont
import os

dynamic_classifier = pickle.load(open("rfc_final_dynamic.sav", "rb"))
dynamic_cols = list(pickle.load(open("dynamic_cols.pkl", "rb")))

static_classifier = pickle.load(open("rfc_final_static.sav", "rb"))
static_cols = list(pickle.load(open("static_cols_final.pkl", "rb")))

family_classifier = pickle.load(open("rfc_final_family.sav", "rb"))
family_cols = list(pickle.load(open("family_cols_final.pkl", "rb")))


print(len(dynamic_cols), len(static_cols))

def predictMalwareBenign(classifier, listOfAttributes, extractedListFromInput):
    inputToModel = []

    for attr in listOfAttributes:
        if attr in extractedListFromInput:
            inputToModel.append(1)
        else:
            inputToModel.append(0)
    prediction = classifier.predict([inputToModel])

    # print("Malware : ", prediction)
    
    return prediction[0]

    # if prediction[0] == 0:
    #     return "Benign"
    # else:
    #     return "Malware"
        
def predictFamily(classifier, listOfAttributes, extractedListFromInput):
    
    families = list(pickle.load(open("families.pkl", "rb")))
    # print(families)
    inputToModel = []

    for attr in listOfAttributes:
        if attr in extractedListFromInput:
            inputToModel.append(1)
        else:
            inputToModel.append(0)

    prediction = classifier.predict([inputToModel])

    # print("Family : ", prediction, families[prediction[0]])
    
    return families[prediction[0]]

# Load the machine learning models for each of the classifiers
classifier1 = None# Load the model for classifier1
classifier2 = None# Load the model for classifier2
classifier3 = None# Load the model for classifier3

# Create a GUI
root = tk.Tk()
root.title("Android Malware Detection")
root.geometry("500x300")
root.configure(background='white')

# Create a label to display the input file status
file_status = tk.Label(root, text="Please select an input file", bg='aliceblue', font=("Helvetica", 12))
file_status.pack(pady=10)

# Create a button to select the input file
filename = None
def select_file():
    global filename
    # filename = filedialog.askopenfilename(initialdir=os.getcwd(), title="Select file",
    #                                       filetypes=(("text files", "*.txt"), ("all files", "*.*")))
    filename = filedialog.askopenfilename(initialdir=os.getcwd(), title="Select file")
    file_status.config(text="Now click on CLASSIFY FILE",bg='aliceblue')

select_button = tk.Button(root, text="Select file", command=select_file, font=("Helvetica", 12),bg='#0052cc', fg='#FFFFFF', 
                          activebackground='blue', 
                          relief='flat', cursor='hand2')
select_button.pack()

# Create a label to display the result
result_label = tk.Label(root, text="", bg='white', font=("Helvetica", 12))
result_label.pack(pady=10)

# Function to classify the input file
def classify_file():
    global filename

    # Reading features from file
    inputFromFile = open(filename,'r').read().splitlines()

    # Level 1 Static classifier
    isMalware = predictMalwareBenign(static_classifier, static_cols, inputFromFile)
    
    # If application is detected as Benign i.e. not a malware
    if isMalware == 0:

        # Level 2 Dynamic classifier
        crossCheck = predictMalwareBenign(dynamic_classifier, dynamic_cols, inputFromFile)
        
        # If again found as Benign do nothing
        if crossCheck == 0:
            result_label.config(text="   Benign ")
            result_label.config(fg="green")

        # Found as malware then predict family
        else:
            family = predictFamily(family_classifier, family_cols, inputFromFile)
            result_label.config(text="Malware: " + family)
            result_label.config(fg="red")
            result_label.place(x=151, y=200)

    # Application is detected as Malware at first Level 1 itself
    else:
        family = predictFamily(family_classifier, family_cols, inputFromFile)
        result_label.config(text="Malware: " + family)
        result_label.config(fg="red")
        result_label.place(x=151, y=200)

        # print(family)
classify_button = tk.Button(root, text="CLASSIFY FILE", command=classify_file, font=("Helvetica", 12))
helv15 = tkFont.Font(family='Helvetica', size=15, weight='bold')
classify_button['font'] = helv15
classify_button.pack()

root.configure(background='aliceblue')
root.title("Android Malware Detection")
# root.geometry("600x400")
root.resizable(width=False, height=False)
result_label = tk.Label(root, text="", font=("Arial", 16), bg='aliceblue')
result_label.pack()
# def print_coordinates(event):
#     print(f"Cursor coordinates: x={event.x}, y={event.y}")

# # bind the Motion event to the root window
# root.bind('<Motion>', print_coordinates)
root.mainloop()
